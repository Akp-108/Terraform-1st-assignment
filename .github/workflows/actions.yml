name: show a full fledged Terraform CI/CD pipeline with GH action

# env:
#   working-directory: ./main/module


on:
  push:   
    branches: ["main", "master"]
  pull_request: 
    branches: ["main", "master"]

  workflow_dispatch:  


jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
    steps:
      - uses: actions/checkout@v3

      - name: Run a one-line script
        run: echo this is one line

        
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2  

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: terraform init
        # working-directory: ${{env.working-directry}}
        working-directory: "./main/Example"

      - name: Terraform Validate
        id: validate
        run: terraform validate 
        # working-directory: ${{env.working-directry}}
        working-directory: "./main/Example"

      - name: Terraform Plan
        id: plan
        run: terraform plan 
        # working-directory: ${{env.working-directry}}
        working-directory: "./main/Example"
      
      - name: Terrafom Plan status
        if: steps.plan.outcome == 'failure'
        run: echo somthing error place check the code once!!!!!!

      - name: Terraform apply
        id: apply
        if: steps.plan.outcome != 'failure'
        run: terraform apply -auto-approve
        # working-directory: ${{env.working-directry}}
        working-directory: "./main/Example"

      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve
        # working-directory: ${{env.working-directry}}
        working-directory: "./main/Example"

# full-fledged-Terraform-CI-CD-pipeline-with-GH-action
